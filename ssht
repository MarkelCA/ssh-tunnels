#!/bin/bash

DEFAULT_CONFIG_PATH="$HOME/.config/ssht/ssht.yml"

declare -A content

error_too_many_params() {
    echo "Error - Too many positional params for this command."
    exit 1
}

open_tunnel() {
    if [ ${#POSITIONAL_ARGS[@]} -gt 2 ]; then
        error_too_many_params
    fi

    read_config $command $database $FILE
    key=""
    if [ -n "${content['ssh_key_path']}" ]; then
        key="-i ${content['ssh_key_path']}"
    fi

    command="ssh -N -L ${content['port_forward']}:${content['host_destination']}:${content['port_destination']} ${content['user_server']}@${content['host_server']} -f $key"
    echo "Running: $command"
    eval $command
}

read_config() {
    cmd=$1
    database=$2
    while IFS="=" read -r key value; do content["$key"]=$value; done < <(
        yq ".tunnels.\"$database\" | to_entries | map([.key, .value] | join(\"=\")) | .[]" $FILE
    )

}

close_tunnel() {
    if [ ${#POSITIONAL_ARGS[@]} -gt 2 ]; then
        error_too_many_params
    fi

    read_config $command $database $FILE
    cmd="fuser ${content['port_forward']}/tcp -k"
    echo "Running: $cmd"
    eval $cmd
}

show() {
    if [ ${#POSITIONAL_ARGS[@]} -gt 1 ]; then
        error_too_many_params
    fi

    if [ -z "$FILE" ] ; then
        FILE=$DEFAULT_CONFIG_PATH
    fi

    yq $FILE
}

list() {
    if [ ${#POSITIONAL_ARGS[@]} -gt 1 ]; then
        error_too_many_params
    fi

    if [ -z "$FILE" ] ; then
        FILE=$DEFAULT_CONFIG_PATH
    fi

    yq '.tunnels | keys' $FILE
}

run_command() {
    command=$1
    case $command in
        "open")  open_tunnel  ${@:2} ;;
        "close") close_tunnel  ;;
        "show") show ${@:2} ;;
        "list") list ${@:2} ;;
        *) fail "Error - Unknown awsi command." ;;
    esac
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--file)
                FILE="$2"
                shift # past argument
                shift # past value
            ;;
            -*|--*)
                echo "Unknown option $1"
                exit 1
            ;;
            *)
                POSITIONAL_ARGS+=("$1") # save positional arg
                shift # past argument
            ;;
        esac
    done
}

main() {
    command=$1
    database=$2

    parse_args $@



    if [ -z "$FILE" ] ; then
        FILE=$DEFAULT_CONFIG_PATH
    fi

    run_command $command $database


    echo "Finished."
}

main $@
